# Performance Optimization Introduction

日常工作中，我们常常会遇到应用的性能问题。性能问题和bug不同，后者的分析和解决思路很多时候从应用日志就能定位到问题根源，但是性能问题在某些时候排查起来相对复杂。

一个简单的应用不仅包含了应用代码本身，还有容器（例如docker），操作系统，存储，网络，文件系统（DB：sql.noSql....），中间件，序列化工具等等。线上出现性能问题了，需要我们从多方面考虑。

除了低级的代码问题导致的性能问题之外，一些性能问题隐藏的比较深，排查也比较困难，需要我们对所使用的框架，组件等等有一定了解，同时掌握性能优化工具，当然也需要一些经验

# 性能优化背景

性能问题常常是多方面作用的结果，代码质量问题，业务发展太快（导致开发没有太多的时间去做更细致的设计），应用架构设计不合理，依赖组件问题等等。这样的问题分析起来一般耗时比较长，分析链路复杂，当然可以某些情况下可以先使用临时方案解决问题，比如集群扩容加机器。但是也有很多时候不是加机器就能解决的问题，而且加机器也存在资源浪费问题，从长远来说是不可取的。对应用程序做合理的性能优化，对应应用的稳定性，成本控制等带来很大的收益。

# 性能优化流程

虽然性能优化没有一个严格的流程定义，但是很多情况我们可以分为

1. 准备阶段

   通过对应用的了解，思考分析性能瓶颈的大致方向，确定一个目标（绝大多数情况下这个目标都是相对准确的）

   * 过滤掉一些因为低级的业务逻辑导致的性能问题，比如日志级别不合理，导致大流量时CPU和磁盘负载飙升，这是调整日志级别就好，比如是因为依赖方性能问题，这时候找依赖方协调解决就好。

   * 了解应用的整体结构：外部依赖，使用的组件和框架，序列化工具，上下游数据链路，哪些接口和模块使用率较高等等

   * 了解应用的服务器信息：集群信息，服务器配置（cpu,内存，操作系统），服务器是容器还是虚拟机

2. 分析阶段

   通过各种手段或工具，分析定位性能瓶颈点

3. 调优阶段

   更具定位到的瓶颈点，进行对应的优化

4. 测试，查看结果阶段

   对调优后的应用进行测试，同准备，分析阶段的各项指标进行对比，观察是否符合预期，如果不符合预期，那就需要重复步骤2，3。有事甚至需要重复1，2，3（当然这样的情况很少很少见）